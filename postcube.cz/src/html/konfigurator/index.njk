{% extends 'layouts/main.njk' %}
{% set language = cs %}

{% block title %}
  PostCube - Konfigur√°tor
{% endblock %}
{% block head %}
  <meta name="description" content="Chytr√° schr√°nka PostCube pro vyzved√°v√°n√≠ z√°silek kdykoliv.">
  <link rel="canonical" href="https://postcube.cz/">
  <meta property="og:type" content="company">
  <meta property="og:url" content="https://www.postcube.cz/">
  <meta property="og:site_name" content="postcube.cz">

  <style>
    .main-info h1 {
      font-size: 2rem;
      margin: 0;
    }

    form h2 {
      font-size: 1.2rem;
      margin-top: 24px;
      margin-bottom: 0;
      color: #707070;
    }

    .main-info {
      margin-top: 48px;
    }

    .select-container {
      display: flex;
      flex-wrap: wrap;
    }

    .select-dropdown {
      flex: 1;
      height: 48px;
      border-radius: 0;
      border: solid 1px #A5A5A5;
      font-size: 1rem;
      padding-left: 16px;
    }

    .main-info__radio-container {
      position: relative;
      flex: 1;
      max-width: 50%;
    }
    .main-info__radio-container.main-info__radio-container--disabled .input-radio~.input-radio--custom,
    .main-info__radio-container.main-info__radio-container--disabled .input-radio~.input-radio--custom:hover {
      background-color: #f5f5f5;
      border-color: transparent;
    }

    .input-radio {
      position: absolute;
      opacity: 0;
      cursor: pointer;
    }

    .input-radio--custom {
      display: flex;
      align-items: center;
      justify-content: center;
      border: solid 1px #A5A5A5;
      flex: 1;
      background-color: #1538E5;
      min-height: 48px;
    }

    .main-info__radio-container .input-radio ~ .input-radio--custom {
      background-color: white;
      color: black;
      font-weight: bold;
    }

    .main-info__radio-container:hover .input-radio ~ .input-radio--custom {
      background-color: white;
      color: black;
    }

    .main-info__radio-container .input-radio:checked ~ .input-radio--custom {
      background-color: #1538E5;
      color: white;
    }

    .main-product-option {
      text-align: center;
      padding: 8px;
    }

    .main-product-option > strong {
      display: block;
      font-size: 1.2rem;
    }

    .main-product-option > span {
      font-weight: normal;
    }

    .order-preview__container {
      background-color: #F2F2F2;
      padding: 32px;
      position: relative;
      display: flex;
      flex-direction: column;
    }

    .order-preview__item {
      display: flex;
    }

    .order-preview__summary {
      text-align: right;
      color: #707070;
      font-size: 1rem;
      margin-top: 32px;
    }

    .order-preview__summary p {
      margin: 0;
    }

    .order-preview__summary .total-price {
      font-size: 2rem;
      color: black;
    }

    .order-preview__container .button-order {
      border: none;
      background-color: #00F483;
      color: black;
      height: 48px;
      margin-top: 24px;
      font-weight: bold;
      font-size: 1.2rem;
      width: 50%;
    }

    .order-preview__container .button-order__container {
      display: flex;
      flex-direction: row-reverse;
    }

    .order-preview-list {
      margin: 0;
      padding: 24px 0 0;
      color: #707070;
      width: 100%;
    }

    .order-preview-list .price {
      color: black;
    }

    .order-preview-list li {
      list-style-type: none;
      height: 48px;
      line-height: 48px;
      border-bottom: solid 1px #A5A5A5;
      display: flex;
      justify-content: space-between;
    }

    .order-preview__container:before {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      border-left: 80px solid white;
      border-top: 80px solid #F2F2F2;
      width: 0;
    }

    .order-preview__container h3 {
      color: black;
      font-size: 1.2rem;
      margin: 0;
    }

    @media (max-width: 839px) {
      #configuration-form {
        padding: 0 0 6em;
      }
    }
    @media (min-width: 840px) {
      #configuration-form {
        padding: 4.5em 0 6em;
      }
    }
  </style>

{% endblock %}

{% block content %}
  <section id="main-info" class="main-info">
    <form id="configuration-form">
      <div class="mdc-layout-grid">
        <div class="mdc-layout-grid__inner layout-wrapper">
          <div class="main-info__content mdc-layout-grid__cell mdc-layout-grid__cell--span-6">
            <h1>Objednejte si box podle va≈°ich p≈ôedstav</h1>
            <h2>Velikost boxu</h2>

            <div class="select-container">
              {% for item in configurator.sizes %}
                <label class="main-info__radio-container {{ "main-info__radio-container--disabled" if item.disabled }}">
                  <input type="radio" class="input-radio" name="size"  {{ "disabled" if item.disabled }}
                         value="{{ item.value }}" {{ "checked" if item.default }}/>
                  <div class="input-radio--custom">
                    <div class="main-product-option">
                      <strong>{{ item.label }}</strong>
                      {% if item.disabled %}
                        <span><small>(chyst√°me)</small></span>
                      {% elif item.info %}
                        <span>{{ item.info }}</span>
                      {% endif %}
                    </div>
                  </div>
                </label>
              {% endfor %}
            </div>

            <h2>Barva</h2>
            <div class="select-container">
              <select name="color" class="select-dropdown">
                {% for item in configurator.colors %}
                  <option value="{{ item.value }}" {{ "selected" if item.default }}>
                    {{ item.label }}
                  </option>
                {% endfor %}
              </select>
            </div>

            {% for item in configurator.accessories %}
              <h2>{{ item.name }}</h2>
              <div class="select-container">
                {% for option in item.options %}
                  <label class="main-info__radio-container">
                    <input type="radio" class="input-radio" name="{{ item.name }}"
                           value="{{ option.value }}" {{ "checked" if option.default }}/>
                    <div class="input-radio--custom">{{ option.label }}</div>
                  </label>
                {% endfor %}
              </div>
            {% endfor %}
          </div>
          <div class="mdc-layout-grid__cell mdc-layout-grid__cell--span-1"></div>
          <div class="main-info__bg mdc-layout-grid__cell mdc-layout-grid__cell--span-5">
            <div class="order-preview__container">
              <h3>Shrnut√≠ objedn√°vky</h3>
              <div class="order-preview__item">
                <ul id="order-preview-list" class="order-preview-list"></ul>
              </div>
              <div class="order-preview__summary">
                <p>Celkov√° cena vƒç. DPH</p>
                <strong id="order-preview-total-price" class="total-price"></strong>
              </div>
              <div class="button-order__container">
                <button type="submit" class="button-order">Pokraƒçovat</button>
              </div>
            </div>
          </div>
        </div>
      </div>
      <script>
        const configurator = {{ configurator | dump | safe }};

        const toSelectedAccesoryOption = values => (accessory) => {
          const value = values[accessory.name]
          if (value) {
            const isBoolOption = accessory.options.length === 2 && accessory
              .options
              .find(option => option.value === null) && true;
            const selected = accessory
              .options
              .find(option => option.value == value);

            return {
              code: [accessory.productId, selected.value]
                .filter(Boolean)
                .join("/"),
              label: isBoolOption
                ? accessory.name
                : `${accessory.name} ${selected.label}`,
              price: selected.price
            }
          }
        }

        const renderOrderPreview = (items) => {
          const currency = Intl.NumberFormat(navigator.language, {
            style: "currency",
            currency: "{{ configurator.currency }}",
            // Fixes 9999.00 => 10000 issue ü§¶‚Äç‚ôÇÔ∏è
            // maximumSignificantDigits: 10
          });

          const previewListElement = document.querySelector("#order-preview-list");
          previewListElement.innerHTML = "";

          for (let item of items) {
            previewListElement.innerHTML += `<li>${item
              .label}<strong class="price">${currency
              .format(parseInt(item.price))}</strong>`;
          }

          const totalPriceElement = document.querySelector("#order-preview-total-price");
          const totalPrice = items.reduce((total, item) => parseInt(item.price) + total, 0);
          totalPriceElement.innerHTML = currency.format(totalPrice);
        }

        const calculateOrderPreview = () => {
          const values = serialize(form);
          const color = configurator
            .colors
            .find((color) => color.value === values.color);
          const size = configurator
            .sizes
            .find((size) => size.value === values.size);

          return [
            {
              code: [values.size, values.color].join("/"),
              label: `Schr√°nka PostCube ${size
                .label} (${color
                .label
                .toLowerCase()})`,
              price: size.price
            },
            ...configurator
              .accessories
              .map(toSelectedAccesoryOption(values))
              .filter(Boolean)
          ];
        }

        const encodeURLConfiguratorParamHash = (ids) => btoa(ids.join("+"))

        const form = document.getElementById('configuration-form');

        window.addEventListener("load", () => renderOrderPreview(calculateOrderPreview()));
        form.addEventListener("change", () => renderOrderPreview(calculateOrderPreview()));

        form.addEventListener("submit", event => {
          event.preventDefault();
          const hash = encodeURLConfiguratorParamHash(calculateOrderPreview().map(product => product.code));
          window
            .location
            .assign(configurator.shopLink + hash);
        });

        function serialize(formElement) {
          const result = {};
          for (let inputElement of formElement.querySelectorAll("input, select")) {
            if (inputElement.selected || inputElement.checked || inputElement.type.startsWith('select')) {
              result[inputElement.name] = inputElement.value;
            }
          }
          return result;
        }
      </script>
    </form>
  </section>
{% endblock %}
