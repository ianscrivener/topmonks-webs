{"version":3,"sources":["components/ListItemLink.js","config.js","App.js","serviceWorker.js","index.js"],"names":["ListItemLink","props","react_default","a","createElement","ListItem_default","Object","assign","button","component","config","defaultPassword","topmonksLoginUrl","googleClientId","googleSecret","awsRegion","awsCognitoPoolId","awsLambdaVersion","App","_this","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","responseGoogleOk","_ref","asyncToGenerator","regenerator_default","mark","_callee","responseFromGoogle","auth","topmonksLoginResponse","wrap","_context","prev","next","console","log","getAuthResponse","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","idToken","sent","setState","isLoggedIn","user","profileObj","googleAccessToken","tokenObj","configureAws","stop","_x","apply","arguments","responseGoogleError","response","logout","submit","state","firstName","lastName","email","phone","isEmail","window","AWS","Lambda","region","apiVersion","invoke","FunctionName","InvocationType","LogType","error","data","alert","parse","Payload","isValid","googleUrl","update","credentials","CognitoIdentityCredentials","IdentityPoolId","e","name","target","value","defineProperty","_this2","Fragment","AppBar_default","position","color","Toolbar_default","className","Typography_default","variant","google_login","buttonText","onLogoutSuccess","clientId","onSuccess","onFailure","Card_default","CardHeader_default","title","CardContent_default","List_default","dense","href","ListItemText_default","primary","Divider_default","Paper_default","elevation","onSubmit","noValidate","TextField_default","label","onChange","event","handleUserInput","required","type","autoComplete","Button_default","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c94c0015.chunk.js","sourcesContent":["import React from 'react';\r\nimport ListItem from '@material-ui/core/ListItem';\r\n\r\nexport default function ListItemLink(props) {\r\n    return <ListItem button component=\"a\" {...props} />;\r\n}","export default {\r\n    defaultPassword: 'welcomemonk',\r\n    topmonksLoginUrl: 'https://insight.topmonks.com/login',\r\n\r\n    /** \r\n     * valid only on these URLS\r\n     * - https://hello.topmonks.com\r\n     * - http://localhost:3000 \r\n     * - http://hello-topmonks-static-web-e11a17a.s3-website-eu-west-1.amazonaws.com\r\n     * The allowed urls can be configured here https://console.developers.google.com/apis/library?project=hello-signin-but-1547138674751&supportedpurview=project&organizationId=484616761707\r\n     * (login is david.votrubec@topmonks.com or create a new one)\r\n     * */\r\n    \r\n    googleClientId: '754652436928-aipe3i0i1uqdc9j7536krhp8lluuco15',\r\n    /** TODO: Not yet sure, what I need it for */\r\n    googleSecret: 'VhWj2x9Ufq4BWqRvqCxOcjdw',\r\n\r\n    awsRegion: 'eu-west-1',\r\n    awsCognitoPoolId: 'eu-west-1:489f06f7-8901-416e-ac06-c8f56e00d020', // Copied from the output of \"pulumi up\"\r\n    awsLambdaVersion: '2015-03-31'\r\n }","import React, { Component } from 'react';\nimport './App.scss';\nimport Paper from '@material-ui/core/Paper';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport TextField from '@material-ui/core/TextField';\nimport List from '@material-ui/core/List';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemLink from './components/ListItemLink';\nimport Button from '@material-ui/core/Button';\nimport Divider from '@material-ui/core/Divider';\nimport { GoogleLogin, GoogleLogout } from 'react-google-login';\nimport * as isEmail from 'isemail';\nimport config from './config';\n\n// TODO: Use the Access token to invoke Lambda\n\nclass App extends Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      isLoggedIn: false,\n      user: null,\n      googleAccessToken: null,\n\n      email: '',\n      firstName: '',\n      lastName: '',\n      phone: '',\n\n      isValid: false\n    }\n\n    this.googleUrl = config.googleClientId + '.apps.googleusercontent.com';\n  }\n\n  responseGoogleOk = async (responseFromGoogle) => {\n    console.log('response from google OK', responseFromGoogle);\n\n    const auth = responseFromGoogle.getAuthResponse();\n\n    // Delegate domain recognition to TopMonks Insight\n    // TODO: Problem: This generates OPTIONS preflight request, which fails\n    const topmonksLoginResponse = await fetch(config.topmonksLoginUrl, {\n      method: \"POST\",\n      // mode: \"cors\",\n      // cache: \"no-cache\",\n      // credentials: \"include\",\n      headers: {\n        \"Accept\": \"application/json\",\n        // \"Content-Type\": \"application/json\"\n        \"Content-Type\": \"text/plain\" // Trying to avoid OPTIONS preflight\n      },\n      body: JSON.stringify({ idToken: auth[\"id_token\"] })\n    });\n\n    debugger\n    console.log('topmonksLoginResponse', topmonksLoginResponse);\n\n\n    this.setState({\n      isLoggedIn: true,\n      user: responseFromGoogle.profileObj,\n      googleAccessToken: responseFromGoogle.tokenObj\n    });\n\n    // const payload = JSON.stringify({\n    //   \"access-token\": token,\n    //   \"profile\": {\n    //     \"name\": profile.getName(),\n    //     \"email\": profile.getEmail(),\n    //     \"image\": profile.getImageUrl()\n    //   }\n    // });\n    // localStorage.setItem(\"topmonks.hello.auth\", payload);\n\n    // TODO: Request login via TopMonks\n\n\n    this.configureAws();\n  }\n  \n  configureAws() {\n    // window.AWS is injected via the AWS SDK script\n    window.AWS.config.update({region: config.awsRegion});\n    window.AWS.config.credentials = new window.AWS.CognitoIdentityCredentials({IdentityPoolId: config.awsCognitoPoolId});\n  }\n\n  responseGoogleError = (response) => {\n    console.log('response from google ERROR', response);\n  }\n\n  logout = (response) => {\n    console.log('you have been logged out', response);\n    this.setState({\n      isLoggedIn: false,\n      user: null,\n      googleAccessToken: null\n    });\n  }\n\n  handleUserInput (e) {\n    const name = e.target.name;\n    const value = e.target.value;\n    this.setState({[name]: value});\n  }\n\n  submit = () => {\n    const isValid = \n      this.state.firstName &&\n      this.state.lastName &&\n      this.state.email &&\n      this.state.phone &&\n      isEmail.validate(this.state.email);\n\n    if (!isValid) {\n      alert('Form is not valid');\n      return;\n    }\n\n    if (!this.state.user || !this.state.googleAccessToken) {\n      alert('Missing token. Are you logged in?');\n      return;\n    }\n\n    // Based on example in https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/browser-invoke-lambda-function-example.html\n    const lambda = new window.AWS.Lambda({region: config.awsRegion, apiVersion: config.awsLambdaVersion});\n    // create JSON object with parameters for invoking Lambda function\n    const pullParams = {\n      FunctionName : 'create-google-account',\n      InvocationType : 'RequestResponse',\n      LogType : 'None'\n    };\n    // create variable to hold data returned by the Lambda function\n    var pullResults;\n\n    lambda.invoke(pullParams, function(error, data) {\n      if (error) {\n        debugger\n        console.error('Error during Lambda invocation', error);\n        alert(error);\n      } else {\n        debugger\n        console.log('Registration to Google was successful');\n        pullResults = JSON.parse(data.Payload);\n      }\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n\n        <AppBar position=\"static\" color=\"default\">\n          <Toolbar className=\"space-between\">\n            <Typography variant=\"h6\" color=\"inherit\">\n              Hello Monk\n            </Typography>\n\n            {\n              this.state.isLoggedIn\n              ?\n                <GoogleLogout\n                  className=\"float-right\"\n                  buttonText={\"Logout \" + this.state.user.email}\n                  onLogoutSuccess={this.logout}\n                />\n              :\n              <GoogleLogin\n                className=\"float-right\"\n                clientId={this.googleUrl}\n                buttonText=\"Login with Google (TopMonks domain)\"\n                onSuccess={this.responseGoogleOk}\n                onFailure={this.responseGoogleError}\n              />\n            }            \n          </Toolbar>\n        </AppBar>        \n\n        {\n          this.state.isLoggedIn\n          ?\n          <div className=\"content\">\n            <h2>Fill your credentials and generate access to TopMonks accounts.</h2>\n\n            <div className=\"flex-row\">\n              <Card>\n                <CardHeader title=\"Access to following systems will be generated.\"/>\n                <CardContent>\n                  <List dense={true}>\n                    <ListItemLink href=\"https://google.com/\">\n                      <ListItemText primary=\"Google\"/>\n                    </ListItemLink>\n\n                    <ListItemLink href=\"https://topmonks.1password.com/\">\n                      <ListItemText primary=\"1Password\"/>\n                    </ListItemLink>\n\n                    <ListItemLink href=\"https://topmonks.slack.com/\">\n                      <ListItemText primary=\"Slack\"/>\n                    </ListItemLink>\n\n                    <ListItemLink href=\"https://github.com/topmonks/\">\n                      <ListItemText primary=\"GitHub\"/>\n                    </ListItemLink>\n\n                    <ListItemLink href=\"https://topmonks.quip.com/\">\n                      <ListItemText primary=\"Quip\"/>\n                    </ListItemLink>\n                  </List>\n\n                  <Divider />\n                  <div>Default password <i>{config.defaultPassword}</i> will be used</div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent>\n                  <Paper className=\"root\" elevation={1}>\n                    <form onSubmit={this.submit} noValidate className=\"flex-column\">\n                        <TextField\n                          name=\"firstName\"\n                          label=\"First Name\"\n                          value={this.state.firstName}\n                          onChange={(event) => this.handleUserInput(event)}\n                          required\n                        />\n                        \n                        <TextField\n                          name=\"lastName\"\n                          label=\"Last Name\"\n                          value={this.state.lastName}\n                          onChange={(event) => this.handleUserInput(event)}\n                          required\n                        />\n\n                        <TextField\n                          name=\"phone\"\n                          label=\"Phone\"\n                          type=\"tel\"\n                          value={this.state.phone}\n                          onChange={(event) => this.handleUserInput(event)}\n                          required\n                        />\n\n                        <TextField\n                          name=\"email\"\n                          label=\"Email\"\n                          value={this.state.email}\n                          type=\"email\"\n                          autoComplete=\"email\"\n                          onChange={(event) => this.handleUserInput(event)}\n                          required\n                        />\n                        \n                        <Button type='button' color=\"primary\" onClick={this.submit}>Generate accounts</Button>\n                    </form>\n                  </Paper>\n                </CardContent>\n              </Card>\n\n            </div>\n          </div>\n        :\n        <div className=\"content\">\n          <Card>\n            <CardHeader title=\"You have to be logged in\" />\n            <CardContent>\n              <GoogleLogin\n                className=\"float-right\"\n                clientId={this.googleUrl}\n                buttonText=\"Login with Google (TopMonks domain)\"\n                onSuccess={this.responseGoogleOk}\n                onFailure={this.responseGoogleError}\n              />\n            </CardContent>\n          </Card>\n        </div>\n        }\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}